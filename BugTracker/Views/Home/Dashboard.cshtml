
@model BugTracker.ViewModels.DashBoardVewModel
@using BugTracker.Helpers
@using BugTracker.Models

@{ 
   ApplicationDbContext db = new ApplicationDbContext();
   UserRolesHelper roleHelpser = new UserRolesHelper();


}
<style>
    body {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        //width: 960px;
        //height: 500px;
        //position: relative;
    }

    path.slice {
        stroke-width: 2px;
    }

    polyline {
        opacity: .3;
        stroke: black;
        stroke-width: 2px;
        fill: none;
    }

    svg text.percent {
        fill: white;
        text-anchor: middle;
        font-size: 12px;
    }
</style>


<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark" style="font-weight:bolder; font-size:3.0rem;">My Dashboard</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">

                    <li class="breadcrumb-item active"></li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- Main content -->






<div class="container" style="border:1px solid red;  min-height100%; min-width:100%; margin-top:-10px;">

    <div class="row">
        <div class="col-md-3 col-sm-6 col-12">
            <div class="info-box">
                <span class="info-box-icon bg-info"><i class="far fa-envelope"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Developers</span>
                    <span class="info-box-number">@roleHelpser.UsersInRole("Developer").ToList().Count()</span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>

        <div class="col-md-3 col-sm-6 col-12">
            <div class="info-box">
                <span class="info-box-icon bg-info"><i class="far fa-envelope"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Ticket Open/Unassigned</span>
                    <span class="info-box-number">@db.Tickets.Where(t  => t.TIcketStatus.Name == "open").ToList().Count()</span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>
    </div>

    <div class="row" style="background-color:white;">
        <div class="col-md-12 ">
            <div class="card card-success" id="notification-card">
                <div class="card-header">
                    <h3 class="card-title">@Model.Notifications.Count() Unread Notification(s)</h3>  <!--  THIS IS THE COUNT   -->

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                    <!-- /.card-tools -->
                </div>
                <!-- /.card-header -->
                <div class="card-body">



                    <table id="not" class="table table-bordered table-hover table-striped" style="width:100%">

                        <thead>
                            <tr>
                                <th>Avatar </th>
                                <th>Recicipient </th>
                                <th>Sender</th>
                                <th>Created</th>
                                <th>Subject</th>

                                <th>Notification Detail</th>
                                <th>Is Read</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var notification in Model.Notifications)
                            {
                                if (notification.isRead)
                                {
                                    <tr style="background-color:lightgreen;">
                                        <td class="target_id">
                                            <img style="width:60%" src=" @Html.DisplayFor(modelItem => notification.Recipient.AvatarUrl)" />

                                        </td>
                                        <td class="target_id">
                                            @Html.DisplayFor(modelItem => notification.Recipient.FullName)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => notification.Sender.FullName)
                                        </td>
                                        <td>
                                            @Html.Raw(notification.Created.ToString("MMM dd,yyyy"))
                                        </td>
                                        <td class="target_project_name" style="width:30%;">
                                            @Html.DisplayFor(modelItem => notification.Subject)
                                        </td>
                                        <td class="target_ticket_priority">
                                            @Html.DisplayFor(modelItem => notification.NotificationBody)
                                        </td>
                                        <td class="target_ticket_priority">
                                            @Html.DisplayFor(modelItem => notification.isRead)
                                        </td>
                                    </tr>

                                }
                                else
                                {
                                    <tr>
                                        <td class="target_id">
                                            <img style="width:60%" src=" @Html.DisplayFor(modelItem => notification.Recipient.AvatarUrl)" />

                                        </td>
                                        <td class="target_id">
                                            @Html.DisplayFor(modelItem => notification.Recipient.FullName)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => notification.Sender.FullName)
                                        </td>
                                        <td>
                                            @Html.Raw(notification.Created.ToString("MMM dd,yyyy"))
                                        </td>
                                        <td class="target_project_name" style="width:30%;">
                                            @Html.DisplayFor(modelItem => notification.Subject)
                                        </td>
                                        <td class="target_ticket_priority">
                                            @Html.DisplayFor(modelItem => notification.NotificationBody)
                                        </td>
                                        <td class="target_ticket_priority">
                                            @Html.DisplayFor(modelItem => notification.isRead)
                                        </td>
                                    </tr>
                                }



                            }
                        </tbody>
                        <thead>
                            <tr>
                                <th>Avatar </th>
                                <th>Recicipient </th>
                                <th>Sender</th>
                                <th>Created</th>
                                <th>Subject</th>

                                <th>Notification Detail</th>
                                <th>Is Read</th>
                            </tr>
                        </thead>
                    </table>

                </div>
                <!-- /.card-body -->
            </div>

        </div>
    </div>




    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="card card-danger">
                    <div class="card-header">
                        <h3 class="card-title">Donut Chart</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>

                        </div>
                    </div>
                    <div class="card-body">
                        <canvas id="donutChart" style="height:330px; min-height:330px"></canvas>
                    </div>
                    <!-- /.card-body -->
                </div>
            </div>



            <div class="col-md-6">
                <div class="card card-success">
                    <div class="card-header">
                        <h3 class="card-title">Bar Chart</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>

                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart">
                            <canvas id="barChart" style="height:230px; min-height:230px"></canvas>
                        </div>
                    </div>
                    <!-- /.card-body -->
                </div>
            </div>
        </div>
    </div>

</div>




@section Scripts{

    <script>
        $('#notification-card').CardWidget('toggle');

        var dataTicketStatus = [];

        $.ajax({
            type: "POST",
            url: "/Home/DataStats",
            data: {},
            complete: function (data) {

                drawDonut(data.responseJSON)
            },
            error: function (xhr, status, error) {
            }
        });



        var donutChartCanvas = $('#donutChart').get(0).getContext('2d')
        var drawDonut = function (dataTicketStatus) {

            var donutData = {
                labels: [
                    'Open',
                    'Assigned',
                    'In Progress',
                    'Resolved',
                    'Archved',

                ],
                datasets: [
                    {
                        data: dataTicketStatus,
                        backgroundColor: ['#f56954', '#00a65a', '#f39c12', '#00c0ef', '#3c8dbc', '#d2d6de'],
                    }
                ]
            }

            var donutOptions = {
                maintainAspectRatio: false,
                responsive: false,
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            var donutChart = new Chart(donutChartCanvas, {
                type: 'doughnut',
                data: donutData,
                options: donutOptions
            })

        }







        $.ajax({
            type: "POST",
            url: "/Home/DataStatsPerUser",
            data: {},
            complete: function (data) {

                drawBarChart(data.responseJSON)
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });



        var barChartCanvas = $('#barChart').get(0).getContext('2d')
        var drawBarChart = function (dataTicketAssignedTo) {
            var population = JSON.parse(dataTicketAssignedTo);



            var areaChartData = {
                labels: population[0],
                datasets: [
                    {
                        label: 'Ticket Count',
                        backgroundColor: 'rgba(60,141,188,0.9)',
                        borderColor: 'rgba(60,141,188,0.8)',
                        pointRadius: false,
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: population[1]
                    },
                ]
            }



            var barChartCanvas = $('#barChart').get(0).getContext('2d')
            var barChartData = jQuery.extend(true, {}, areaChartData)
            var temp0 = areaChartData.datasets[0]

            barChartData.datasets[0] = temp0


            var barChartOptions = {
                responsive: false,
                maintainAspectRatio: false,
                datasetFill: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }

            var barChart = new Chart(barChartCanvas, {
                type: 'bar',
                data: barChartData,
                options: barChartOptions
            })

        }

    </script>
}
